name: release-and-sbom
on:
  push:
    tags:
      - "v*" # triggers only if push new tag version, like `0.8.4` or else

# Declare default deny permissions
permissions: {}

jobs:
  # 1st JOB: Generate ldflags dynamically.
  # Optional: only needed for ldflags.
  args:
    runs-on: ubuntu-latest
    outputs:
      commit-date: ${{ steps.ldflags.outputs.commit-date }}
      commit: ${{ steps.ldflags.outputs.commit }}
      version: ${{ steps.ldflags.outputs.version }}
      tree-state: ${{ steps.ldflags.outputs.tree-state }}
    steps:
      - id: checkout
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # tag=v2.3.4
        with:
          fetch-depth: 0
      - id: ldflags
        run: |
          echo "commit-date=$(git log --date=iso8601-strict -1 --pretty=%ct)" >> "$GITHUB_OUTPUT"
          echo "commit=$GITHUB_SHA" >> "$GITHUB_OUTPUT"
          echo "version=$(git describe --tags --always --dirty | cut -c2-)" >> "$GITHUB_OUTPUT"
          echo "tree-state=$(if git diff --quiet; then echo "clean"; else echo "dirty"; fi)" >> "$GITHUB_OUTPUT"

  # 2nd job - Build application with SLSA that attest to the build process        
  slsa-builder:
    name: slsa-builder-${{matrix.os}}-${{matrix.arch}}
    needs: args
    permissions:
      id-token: write # To sign.
      contents: write # To upload release assets.
      actions: read   # To read workflow path.
    strategy:
      matrix:
        os:
          - linux
        arch:
          - amd64
    uses: slsa-framework/slsa-github-generator/.github/workflows/builder_go_slsa3.yml@v2.0.0
    with:
      go-version: 1.22
      evaluated-envs: "COMMIT_DATE:${{needs.args.outputs.commit-date}}, COMMIT:${{needs.args.outputs.commit}}, VERSION:${{needs.args.outputs.version}}, TREE_STATE:${{needs.args.outputs.tree-state}}"
      config-file: .slsa-goreleaser/${{matrix.os}}-${{matrix.arch}}.yml
      upload-assets: true
  
  sbom-goreleaser:
    name: sbom-${{matrix.os}}-${{matrix.arch}}
    needs: 
      - slsa-builder
      - args
    runs-on: ubuntu-latest

    outputs:
      hashes: ${{ steps.subjects.outputs.hashes }}

    strategy:
      matrix:
        os:
          - linux
        arch:
          - amd64
    permissions:
      contents: write # To upload release assets.

    steps: 
      - name: Checkout Code
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # tag=v2.3.4

      - name: Download Binaries
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          name: test_${{ needs.args.outputs.version }}-${{matrix.os}}-${{matrix.arch}}
      - name: Set up Go
        uses: actions/setup-go@4d34df0c2316fe8122ab82dc22947d607c0c91f9 # v4.0.0
        with:
          go-version: "1.22"
          check-latest: true
  
      - name: Install Syft
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
  
      - name: Run GoReleaser
        id: run-goreleaser
        uses: goreleaser/goreleaser-action@b953231f81b8dfd023c58e0854a721e35037f28b # tag=v3
        with:
            version: "~> v1"
            args: release --clean
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}    
      - name: Generate subjects
        id: subjects
        env:
            ARTIFACTS: "${{ steps.run-goreleaser.outputs.artifacts }}"
        # and below we extract artifacts and corresponding digests from artifacts.josn created by the goreleaser
        # echo "hashes=$hashes" >> $GITHUB_OUTPUT will make the hashes available as subjects.outputs.hashes inside this job
        # and as build-goreleaser.outputs.hashed outside the job
        # 
        # one other option is to just use checksum.txt that I create as part of my 
        # goreleaser configuration .goreleaser.yaml
          # checksum:
          #   name_template: 'checksums.txt'
          #   algorithm: sha256
        run: |
          set -euo pipefail

          hashes=$(echo $ARTIFACTS | jq --raw-output '.[] | {name, "digest": (.extra.Digest // .extra.Checksum)} | select(.digest) | {digest} + {name} | join("  ") | sub("^sha256:";"")' | base64 -w0)
          if test "$hashes" = ""; then # goreleaser < v1.13.0
            checksum_file=$(echo "$ARTIFACTS" | jq -r '.[] | select (.type=="Checksum") | .path')
            hashes=$(cat $checksum_file | base64 -w0)
          fi
          echo "hashes=$hashes" >> $GITHUB_OUTPUT
  provenance:
    strategy:
      matrix:
        os:
          - linux
        arch:
          - amd64
    needs: [sbom-goreleaser]
    permissions:
      actions: read # To read the workflow path.
      id-token: write # To sign the provenance.
      contents: write # To add assets to a release.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    with:
      base64-subjects: "${{ needs.sbom-goreleaser.outputs.hashes }}"
      upload-assets: true # upload to a new release
